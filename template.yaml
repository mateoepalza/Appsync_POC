AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SQL-Data-Service

Parameters:
  Stage:
    Type: String
    Description: Stage name
    MinLength: "3"
    AllowedValues:
      - lab
      - dev
      - staging
      - prod


Globals:
  Function:
    Runtime: python3.11
    Environment:
      Variables:
        STAGE: !Ref Stage
    Handler: handler.lambda_handler
    Layers:
      - !Ref DependenciesLayer

Resources:
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-${Stage}"
      RetentionInDays: 14

  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.11
      ContentUri: ./src/shared
      LayerName: !Sub ${AWS::StackName}-Dependencies
    Metadata:
      BuildMethod: python3.11

  AllDataHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-${Stage}-all-data"
      CodeUri: ./src/handlers/all_handler
      Timeout: 300

  AllDataLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AllDataHandler}"
      RetentionInDays: 14

  YearlyDataHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-${Stage}-yearly-data"
      CodeUri: ./src/handlers/yearly_handler
      Timeout: 300

  YearlyDataLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${YearlyDataHandler}"
      RetentionInDays: 14

  MonthlyDataHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-${Stage}-monthly-data"
      CodeUri: ./src/handlers/monthly_handler
      Timeout: 300

  MonthlyDataLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${MonthlyDataHandler}"
      RetentionInDays: 14

  WeeklyDataHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-${Stage}-weekly-data"
      CodeUri: ./src/handlers/weekly_handler
      Timeout: 300

  WeeklyDataLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${WeeklyDataHandler}"
      RetentionInDays: 14

  WeightInsightsHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-${Stage}-weight-insights"
      CodeUri: ./src/handlers/weight_insights
      Timeout: 300

  WeightInsightsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${WeightInsightsHandler}"
      RetentionInDays: 14

  AppSyncAPIServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowDynamoDB
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource: !GetAtt CachingAppsyncTable.Arn
        - PolicyName: AppSyncLambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"

  AppSyncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/appsync/apis/${AppSyncAPI.ApiId}"
      RetentionInDays: 14  # Adjust the retention period as needed

  AppSyncCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowAppSyncLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:log-group:/aws/appsync/apis/*:*

  AppSyncAPI:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub "${AWS::StackName}-${Stage}-appsync-test"
      AuthenticationType: "API_KEY"
      ApiType: GRAPHQL
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncCloudWatchLogsRole.Arn
        FieldLogLevel: ALL
        ExcludeVerboseContent: false

  AppSyncApiKeyAPI:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId

  AppSyncSchemaAPI:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Definition: |
        input GetUserInsightsInput @aws_api_key @aws_cognito_user_pools {
            userId: String!
        }

        type MonthlyDataPoint @aws_api_key @aws_cognito_user_pools {
            start: String!
            end: String!
            value: Float
        }

        type GeneralDataPoint @aws_api_key @aws_cognito_user_pools {
            date: String!
            value: Float
        }

        type MonthlyChartData @aws_api_key @aws_cognito_user_pools {
            median: Float!
            dataPoints: [MonthlyDataPoint]!
        }

        type ChartData @aws_api_key @aws_cognito_user_pools {
            median: Float!
            dataPoints: [GeneralDataPoint]!
        }

        type ChartInsights @aws_api_key @aws_cognito_user_pools {
            petId: String!
            weeklyData: ChartData
            monthlyData: MonthlyChartData
            yearlyData: ChartData
            allData: ChartData
        }

        type UserInsights @aws_api_key @aws_cognito_user_pools {
            weightInsights: [ChartInsights]!
        }

        type Query  @aws_api_key @aws_cognito_user_pools {
            getUserInsights(input: GetUserInsightsInput!): UserInsights!
        }

        schema {
            query: Query
        }

  # Function Configuration

  ## DynamoDB Function Configuration

  SaveCacheToDynamoDBFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: "save_cache_from_dynamodb"
      DataSourceName: !GetAtt CacheDynamoDBDataSource.Name
      FunctionVersion: "2018-05-29"
      RequestMappingTemplate: |
        #if($ctx.stash.result)
          #return($ctx.stash.result)
        #end
        #set($endOfDayDateStr = "$!{util.time.nowFormatted("yyyy-MM-dd", "UTC")}T23:59:59Z")
        #set($endOfDayEpoch = $util.time.parseFormattedToEpochSeconds($endOfDayDateStr, "yyyy-MM-dd'T'HH:mm:ss'Z'"))
        #set($ttl = $endOfDayEpoch * 1000)
        {
          "version" : "2018-05-29",
          "operation" : "PutItem",
          "key" : {
            "id" : $util.dynamodb.toStringJson("${ctx.source.petId}-${ctx.info.fieldName}")
          },
          "attributeValues": {
            "ttl": $util.dynamodb.toNumberJson($ttl),
            "content": $util.dynamodb.toStringJson($utils.toJson($ctx.prev.result))
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        $utils.toJson($ctx.prev.result)

  GetCacheFromDynamoDBFunctionConfiguration:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: "get_cache_from_dynamodb"
      DataSourceName: !GetAtt CacheDynamoDBDataSource.Name
      FunctionVersion: "2018-05-29"
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toStringJson("${ctx.source.petId}-${ctx.info.fieldName}")
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        #if($ctx.result)
          $util.qr($ctx.stash.put("result", $util.parseJson($ctx.result.content)))
        #end
        {}

  ## Lambdas function configuration

  AllLambdaPipelineFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: "yearly_lambda_pipeline_function_configuration"
      DataSourceName: !GetAtt AllDataLambdaDataSource.Name
      FunctionVersion: "2018-05-29"
      RequestMappingTemplate: |
        #if($ctx.stash.result)
          #return($ctx.stash.result)
        #end
        {
          "version" : "2018-05-29",
          "operation": "Invoke",
          "payload": $util.toJson($ctx)
        }
      ResponseMappingTemplate: $util.toJson($ctx.result)

  YearlyLambdaPipelineFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: "yearly_lambda_pipeline_function_configuration"
      DataSourceName: !GetAtt YearlyDataLambdaDataSource.Name
      FunctionVersion: "2018-05-29"
      RequestMappingTemplate: |
        #if($ctx.stash.result)
          #return($ctx.stash.result)
        #end
        {
          "version" : "2018-05-29",
          "operation": "Invoke",
          "payload": $util.toJson($ctx)
        }
      ResponseMappingTemplate: $util.toJson($ctx.result)

  MonthlyLambdaPipelineFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: "monthly_lambda_pipeline_function_configuration"
      DataSourceName: !GetAtt MonthlyDataLambdaDataSource.Name
      FunctionVersion: "2018-05-29"
      RequestMappingTemplate: |
        #if($ctx.stash.result)
          #return($ctx.stash.result)
        #end
        {
          "version" : "2018-05-29",
          "operation": "Invoke",
          "payload": $util.toJson($ctx)
        }
      ResponseMappingTemplate: $util.toJson($ctx.result)

  WeeklyLambdaPipelineFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: "weekly_lambda_pipeline_function_configuration"
      DataSourceName: !GetAtt WeeklyDataLambdaDataSource.Name
      FunctionVersion: "2018-05-29"
      RequestMappingTemplate: |
        #if($ctx.stash.result)
          #return($ctx.stash.result)
        #end
        {
          "version" : "2018-05-29",
          "operation": "Invoke",
          "payload": $util.toJson($ctx)
        }
      ResponseMappingTemplate: $util.toJson($ctx.result)

  # Data Sources

  CacheDynamoDBDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: !Sub "${Stage}_cache_dynamodb_data_source"
      Type: AMAZON_DYNAMODB
      DynamoDBConfig:
        AwsRegion: us-east-1
        TableName: !Ref CachingAppsyncTable
      ServiceRoleArn: !GetAtt AppSyncAPIServiceRole.Arn

  AllDataLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: !Sub "${Stage}_all_data_source"
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt AllDataHandler.Arn
      ServiceRoleArn: !GetAtt AppSyncAPIServiceRole.Arn

  YearlyDataLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: !Sub "${Stage}_yearly_data_source"
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt YearlyDataHandler.Arn
      ServiceRoleArn: !GetAtt AppSyncAPIServiceRole.Arn

  MonthlyDataLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: !Sub "${Stage}_monthly_data_source"
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt MonthlyDataHandler.Arn
      ServiceRoleArn: !GetAtt AppSyncAPIServiceRole.Arn

  WeeklyDataLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: !Sub "${Stage}_weekly_data_source"
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt WeeklyDataHandler.Arn
      ServiceRoleArn: !GetAtt AppSyncAPIServiceRole.Arn

  WeightInsightsLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: !Sub "${Stage}_weight_insights_lambda_data_source"
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt WeightInsightsHandler.Arn
      ServiceRoleArn: !GetAtt AppSyncAPIServiceRole.Arn

  GetUserInsightsLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: !Sub "${Stage}_get_user_insights_lambda_data_source"
      Type: NONE

  # Resolvers

  GetUserInsightsLambdaDataSourceResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: Query
      FieldName: getUserInsights
      DataSourceName: !GetAtt GetUserInsightsLambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2018-05-29",
          "payload": $util.toJson($ctx)
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  WeightInsightsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: UserInsights
      FieldName: weightInsights
      DataSourceName: !GetAtt WeightInsightsLambdaDataSource.Name
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        $util.toJson($ctx.result)

  ## Resolvers functions

  WeeklyDataResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: ChartInsights
      FieldName: weeklyData
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt GetCacheFromDynamoDBFunctionConfiguration.FunctionId
          - !GetAtt WeeklyLambdaPipelineFunction.FunctionId
          - !GetAtt SaveCacheToDynamoDBFunctionConfiguration.FunctionId
      RequestMappingTemplate: |
        {
          "version" : "2018-05-29",
          "payload": $util.toJson($ctx)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        $util.toJson($ctx.result)

  MonthlyDataResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: ChartInsights
      FieldName: monthlyData
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt GetCacheFromDynamoDBFunctionConfiguration.FunctionId
          - !GetAtt MonthlyLambdaPipelineFunction.FunctionId
          - !GetAtt SaveCacheToDynamoDBFunctionConfiguration.FunctionId
      RequestMappingTemplate: |
        {
          "version" : "2018-05-29",
          "payload": $util.toJson($ctx)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        $util.toJson($ctx.result)

  YearlyDataResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: ChartInsights
      FieldName: yearlyData
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt GetCacheFromDynamoDBFunctionConfiguration.FunctionId
          - !GetAtt YearlyLambdaPipelineFunction.FunctionId
          - !GetAtt SaveCacheToDynamoDBFunctionConfiguration.FunctionId
      RequestMappingTemplate: |
        {
          "version" : "2018-05-29",
          "payload": $util.toJson($ctx)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        $util.toJson($ctx.result)

  AllDataResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: ChartInsights
      FieldName: allData
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt GetCacheFromDynamoDBFunctionConfiguration.FunctionId
          - !GetAtt AllLambdaPipelineFunction.FunctionId
          - !GetAtt SaveCacheToDynamoDBFunctionConfiguration.FunctionId
      RequestMappingTemplate: |
        {
          "version" : "2018-05-29",
          "payload": $util.toJson($ctx)
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        $util.toJson($ctx.result)

  # DynamoDB Table

  CachingAppsyncTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-${Stage}-caching-appsync"
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH