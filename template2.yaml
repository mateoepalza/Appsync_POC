AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SQL-Data-Service

Parameters:
  Stage:
    Type: String
    Description: Stage name
    MinLength: "3"
    AllowedValues:
      - lab
      - dev
      - staging
      - prod


Globals:
  Function:
    Runtime: python3.11
    Environment:
      Variables:
        STAGE: !Ref Stage
    Handler: handler.lambda_handler
    Layers:
      - !Ref DependenciesLayer

Resources:
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-${Stage}"
      RetentionInDays: 14

  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.11
      ContentUri: ./src/shared
      LayerName: !Sub ${AWS::StackName}-Dependencies
    Metadata:
      BuildMethod: python3.11

  GetYearlyReviewFeederHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-${Stage}-get-yearly-review-feeder"
      CodeUri: ./src/handlers/get_yearly_review_feeder_handler
      Timeout: 300

  GetYearlyReviewFeederLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetYearlyReviewFeederHandler}"
      RetentionInDays: 14

  GetYearlyReviewScoopsSavesHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-${Stage}-get-yearly-review-scoops-saves"
      CodeUri: ./src/handlers/get_yearly_review_scoops_saves_handler
      Timeout: 300

  GetYearlyReviewScoopsSavesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetYearlyReviewScoopsSavesHandler}"
      RetentionInDays: 14

  GetYearlyReviewWeightHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-${Stage}-get-yearly-review-weight"
      CodeUri: ./src/handlers/get_yearly_review_weight_handler
      Timeout: 300

  GetYearlyReviewWeightLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetYearlyReviewWeightHandler}"
      RetentionInDays: 14

  AppSyncAPIServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppSyncLambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt GetYearlyReviewFeederHandler.Arn
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt GetYearlyReviewScoopsSavesHandler.Arn
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt GetYearlyReviewWeightHandler.Arn

  AppSyncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/appsync/apis/${AppSyncAPI.ApiId}"
      RetentionInDays: 14  # Adjust the retention period as needed

  AppSyncCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowAppSyncLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:log-group:/aws/appsync/apis/*:*

  AppSyncAPI:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub "${AWS::StackName}-${Stage}-appsync-test"
      AuthenticationType: "API_KEY"
      ApiType: GRAPHQL
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncCloudWatchLogsRole.Arn
        FieldLogLevel: ALL
        ExcludeVerboseContent: false

  AppSyncCacheAPI:
    Type: AWS::AppSync::ApiCache
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      ApiCachingBehavior: PER_RESOLVER_CACHING
      Type: SMALL
      Ttl: 3600

  AppSyncApiKeyAPI:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId

  AppSyncSchemaAPI:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Definition: |
        input getYearlyReviewInput {
          userId: String!
        }

        type petStatistic {
          name: String!
          weight: Int!
          visits: Int!
        }

        type feederStatistic {
            total: Int!
        }

        type scoopSaveStatistic {
            total: Int!
        }

        type weightStatistic{
            pets: [petStatistic]!
        }

        type yearlyReview {
            weight: weightStatistic!
            scoopSaves: scoopSaveStatistic!
            feeder: feederStatistic!
        }

        type Query {
            getYearlyReview(input: getYearlyReviewInput!): yearlyReview!
        }

        schema {
            query: Query
        }

  GetYearlyReviewFeederLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: !Sub "${Stage}_get_yearly_review_feeder_lambda_data_source"
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt GetYearlyReviewFeederHandler.Arn
      ServiceRoleArn: !GetAtt AppSyncAPIServiceRole.Arn

  GetYearlyReviewScoopsSavesLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: !Sub "${Stage}_get_yearly_review_scoops_saves_lambda_data_source"
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt GetYearlyReviewScoopsSavesHandler.Arn
      ServiceRoleArn: !GetAtt AppSyncAPIServiceRole.Arn

  GetYearlyReviewWeightLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: !Sub "${Stage}_get_yearly_review_weight_lambda_data_source"
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt GetYearlyReviewWeightHandler.Arn
      ServiceRoleArn: !GetAtt AppSyncAPIServiceRole.Arn

  GetYearlyReviewLambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: !Sub "${Stage}_get_yearly_review_lambda_data_source"
      Type: NONE

  GetYearlyReviewResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: Query
      FieldName: getYearlyReview
      DataSourceName: !GetAtt GetYearlyReviewLambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2018-05-29",
          "payload": $util.toJson($ctx)
        }
      ResponseMappingTemplate: |
        $util.toJson($ctx.result)

  GetYearlyReviewFeederResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: yearlyReview
      FieldName: feeder
      DataSourceName: !GetAtt GetYearlyReviewFeederLambdaDataSource.Name
      CachingConfig:
        CachingKeys:
          - $context.source.arguments.input.userId
        Ttl: 3600
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        $util.toJson($ctx.result)

  GetYearlyReviewScoopsSavesResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: yearlyReview
      FieldName: scoopSaves
      DataSourceName: !GetAtt GetYearlyReviewScoopsSavesLambdaDataSource.Name
      CachingConfig:
        CachingKeys:
          - $context.source.arguments.input.userId
        Ttl: 3600
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        $util.toJson($ctx.result)

  GetYearlyReviewWeightResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: yearlyReview
      FieldName: weight
      DataSourceName: !GetAtt GetYearlyReviewWeightLambdaDataSource.Name
      CachingConfig:
        CachingKeys:
          - $context.source.arguments.input.userId
        Ttl: 3600
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.message, $ctx.error.type)
        #end
        $util.toJson($ctx.result)

#  GetYearlyReviewLambdaDataSource:
#    Type: AWS::AppSync::DataSource
#    Properties:
#      ApiId: !GetAtt AppSyncAPI.ApiId
#      Name: !Sub "${Stage}_get_yearly_review_lambda_data_source"
#      Type: AWS_LAMBDA
#      LambdaConfig:
#        LambdaFunctionArn: !GetAtt GetYearlyReviewHandler.Arn
#      ServiceRoleArn: !GetAtt AppSyncAPIServiceRole.Arn

#  Resolver:
#    Type: AWS::AppSync::Resolver
#    Properties:
#      ApiId: !GetAtt AppSyncAPI.ApiId
#      TypeName: Query
#      FieldName: getYearlyReview
#      DataSourceName: !GetAtt GetYearlyReviewLambdaDataSource.Name

